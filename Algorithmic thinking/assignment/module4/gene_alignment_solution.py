import application4_provided as load
import alignment_algorithm as algorithm
import random
import matplotlib.pyplot as plt

# load protein genes and scoring matrix
fly_protein = load.read_protein("alg_FruitflyEyelessProtein.txt")
human_protein = load.read_protein("alg_HumanEyelessProtein.txt")
scoring_matrix = load.read_scoring_matrix("alg_PAM50.txt")
consensus_pax = load.read_protein("alg_ConsensusPAXDomain.txt")


##############Q1
alignment_matrix_eyeless = algorithm.compute_alignment_matrix(fly_protein, human_protein,
                                                      scoring_matrix, False)
local_alignments_eyeless = algorithm.compute_local_alignment(fly_protein, human_protein,
                                                     scoring_matrix, alignment_matrix_eyeless)

#print local_alignments
## score is 875
## local aligment are:
## 'HSGVNQLGGVFVGGRPLPDSTRQKIVELAHSGARPCDISRILQVSNGCVSKILGRYYETGSIRPRAIGGSKPR
##  VATAEVVSKISQYKRECPSIFAWEIRDRLLQENVCTNDNIPSVSSINRVLRNLAAQKEQQ'
## 'HSGVNQLGGVFVNGRPLPDSTRQKIVELAHSGARPCDISRILQVSNGCVSKILGRYYETGSIRPRAIGGSKPR
##  VATPEVVSKIAQYKRECPSIFAWEIRDRLLSEGVCTNDNIPSVSSINRVLRNLASEK-QQ'


##############Q2
local_1 = local_alignments_eyeless[1]
local_2 = local_alignments_eyeless[2]
# 1 for fly, 2 for human

match_percentage = []

for seq in [local_1, local_2]:
    seq = seq.translate(None, "-")
    alignment_matrix_pax = algorithm.compute_alignment_matrix(seq, consensus_pax,
                                                              scoring_matrix, True)
    global_alignment_pax = algorithm.compute_global_alignment(seq, consensus_pax,
                                                              scoring_matrix, alignment_matrix_pax)
    global_1 = global_alignment_pax[1]
    global_2 = global_alignment_pax[2]
    #print "the global alignment of the dash-less sequence and ConsensusPAXDomain sequence is"
    #print global_1
    #print "and"
    #print global_2
    match = 0
    for seq in range(len(global_1)):
        if global_1[seq] == global_2[seq]:
            match +=1
    percentage = float(match) / len(global_1)
    print "the percentage of match is", percentage
    match_percentage.append(percentage)

## match percentage is 0.701492537313 and 0.729323308271


##############Q4
def generate_null_distribution(seq_x, seq_y, scoring_matrix, num_trials):
    '''
    input: two sequences, a scoring matrix and a number of trials
    output: a dictionary scoring_distribution that represents a 
    unnormalized distribution generated by performing below num_trials times:
    1.generate a random permutation of seq_y using random.shuffle();
    2.compute the maximum value score for local lighment of seq_x and rand_y;
    3.increment the entry score in the dictionary scoring_distribution by 1.
    '''
    scoring_distribution = {}
    count = 0
    for trial in range(num_trials):
        seq_y_list = list(seq_y)
        random.shuffle(seq_y_list)
        rand_y = "".join(seq_y_list)
        alignment_matrix = algorithm.compute_alignment_matrix(seq_x, rand_y,
                                                              scoring_matrix, False)
        local_alignment = algorithm.compute_local_alignment(seq_x, rand_y,
                                                            scoring_matrix, alignment_matrix)
        score = local_alignment[0]
        if score in scoring_distribution:
            scoring_distribution[score] += 1
        else:
            scoring_distribution[score] = 1
        count += 1
        if count % 100 == 0:
            print count, "trials completed"
    return scoring_distribution


scoring_distribution = generate_null_distribution(human_protein, fly_protein,
                                                  scoring_matrix, 1000)

scoring_distribution_nor = {}
values = scoring_distribution.values()
values_sum = sum(values)
for score in scoring_distribution:
    scoring_distribution_nor[score] = float(scoring_distribution[score]) / values_sum

#plotting
bar_groups = scoring_distribution_nor.keys()
bar_values = scoring_distribution_nor.values()
plt.bar(bar_groups, bar_values, color="blue")
plt.xlabel("scores")
plt.ylabel("frequency of scores")
plt.title("Null Distribution (Desktop Python)")
plt.show()


##############Q5
# mean
sum_value = 0
scores = scoring_distribution.keys()
frequency = scoring_distribution.values()
for i in range(len(scores)):
    sum_value += scores[i] * scoring_distribution[scores[i]] 
mean = float(sum_value) / 1000
print "mean is", mean

# standard deviation
sum_squared = 0
for i in range(len(scores)):
    sum_squared += (scores[i] - mean) ** 2 * scoring_distribution[scores[i]] 
sd = (float(sum_squared) / 1000) ** 0.5
print "standard deviation is", sd

z_score = (875-mean) / sd
print "z-score is", z_score

## mean is 51.73
## standard deviation is 7.01206816852
## z-score is 117.407586494


    

